// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator clinent {
  provider = "prisma-client-js"
}

model User {
  Id             String         @id @default(uuid())
  CreatedAt      DateTime       @default(now())
  UpdatedAt      DateTime?      @updatedAt
  UserName       String         @unique
  Email          String?        @unique
  Name           String?
  Surname        String?
  PodUserId      Int            @unique
  PodContactId   Int?
  ProfileImage   String?
  PhoneNumber    String?        @db.VarChar(32)
  LocalToken     String?        @unique
  TokenExpiresAt DateTime?
  RefreshToken   String?
  Role           String         @default("user")
  SSOProfile     Json
  Tokens         Json
  Targets        UserTargets[]
  Transactions   Transactions[]
  AnswerLogs     AnswerLogs[]
}

model TargetDefinitions {
  Id          String        @id @default(uuid())
  CreatedAt   DateTime      @default(now())
  UpdatedAt   DateTime?     @updatedAt
  Type        Int
  AnswerCount Int
  GoldenCount Int           @default(0)
  DatasetId   String
  Dataset     Datasets      @relation(fields: [DatasetId], references: [Id])
  T           Float         @db.DoublePrecision
  UMin        Float         @db.DoublePrecision
  UMax        Float         @db.DoublePrecision
  BonusFalse  Float         @default(0) @db.DoublePrecision
  BonusTrue   Float         @default(0) @db.DoublePrecision
  UserTargets UserTargets[]
}

model UserTargets {
  Id                 String            @id @default(uuid())
  CreatedAt          DateTime          @default(now())
  UpdatedAt          DateTime          @updatedAt
  TargetDefinitionId String
  Definition         TargetDefinitions @relation(fields: [TargetDefinitionId], references: [Id])
  OwnerId            String
  Owner              User              @relation(fields: [OwnerId], references: [Id])
}

model Datasets {
  Id                       String              @id @default(uuid())
  CreatedAt                DateTime            @default(now())
  UpdatedAt                DateTime?           @updatedAt
  Name                     String?
  Description              String?
  Type                     Int
  T                        Float               @db.DoublePrecision
  UMin                     Float               @db.DoublePrecision
  UMax                     Float               @db.DoublePrecision
  LabelingStatus           Int
  AnswerType               Int                 @default(0)
  FieldName                String?             @db.VarChar(255)
  IsActive                 Boolean             @default(false)
  QuestionType             Int                 @default(0)
  QuestionSrc              String?
  QuestionTemplate         String?
  ItemsSourcePath          String?
  ProcessedItemsSourcePath String?
  AnswerBudgetCountPerUser Int                 @default(0)
  CorrectGoldenAnswerIndex Int                 @default(0)
  AnswerReplicationCount   Int                 @default(0)
  TotalBudget              Decimal             @default(0.0) @db.Decimal(18, 2)
  TargetDefinitions        TargetDefinitions[]
  DatasetItems             DatasetItems[]
  Labels                   Labels[]
  //AnswerLogs               AnswerLogs[]
  AnswerOption             AnswerOptions?
  Transactions             Transactions[]
  AnswerLogs               AnswerLogs[]
}

model DatasetItems {
  Id                  String       @id @default(uuid())
  CreatedAt           DateTime     @default(now())
  UpdatedAt           DateTime?    @updatedAt
  Name                String
  Content             String?
  Type                Int
  FileExtension       String       @db.VarChar(30)
  FileName            String
  FilePath            String
  FileSize            Int
  LabelId             String?
  Label               Labels?      @relation("Label", fields: [LabelId], references: [Id])
  FinalLabelId        String?
  FinalLabel          Labels?      @relation("FinalLabel", fields: [FinalLabelId], references: [Id])
  IsGoldenData        Boolean
  DatasetId           String
  Dataset             Datasets     @relation(fields: [DatasetId], references: [Id])
  AnswerLogs          AnswerLogs[]
}

model Labels {
  Id               String         @id @default(uuid())
  CreatedAt        DateTime       @default(now())
  UpdatedAt        DateTime?      @updatedAt
  Name             String
  DatasetId        String
  Dataset          Datasets       @relation(fields: [DatasetId], references: [Id])
  DatasetItems     DatasetItems[] @relation("Label")
  FinalDatasetItem DatasetItems?  @relation("FinalLabel")
  AnswerLogs       AnswerLogs[]
}

//model DatasetItemLabels {
//  Id            String       @id @default(uuid())
//  LabelId       String
//  Label         Labels       @relation(fields: [LabelId], references: [Id])
//  DatasetItemId String
//  DatasetItem   DatasetItems @relation(fields: [DatasetItemId], references: [Id])
//}

model AnswerLogs {
  Id                        String       @id @default(uuid())
  CreatedAt                 DateTime     @default(now())
  UserId                    String
  User                      User         @relation(fields: [UserId], references: [Id])
  Ignored                   Boolean
  IgnoreReason              String?
  Answer                    Int
  QuestionObject            Json?
  DatasetId                 String
  Dataset                   Datasets     @relation(fields: [DatasetId], references: [Id])
  DatasetItemId             String
  DatasetItem               DatasetItems @relation(fields: [DatasetItemId], references: [Id])
  DeterminedLabelId         String?
  DeterminedLabel           Labels?      @relation(fields: [DeterminedLabelId], references: [Id])
  DurationToAnswerInSeconds BigInt       @default(0)
  CreditCalculated          Boolean      @default(false)
}

model AnswerOptions {
  Id        String   @id @default(uuid())
  Type      Int
  Title     String?
  Src       String?
  Index     Int
  DatasetId String
  Dataset   Datasets @relation(fields: [DatasetId], references: [Id])
}

model Transactions {
  Id                 BigInt    @id @default(autoincrement())
  CreatedAt          DateTime  @default(now())
  UpdatedAt          DateTime? @updatedAt
  OwnerId            String
  Owner              User      @relation(fields: [OwnerId], references: [Id])
  DebitAmount        Float     @db.DoublePrecision
  CreditAmount       Float     @db.DoublePrecision
  Reason             Int
  ReasonDescription  String?
  ReferenceDatasetId String?
  ReferenceDataset   Datasets? @relation(fields: [ReferenceDatasetId], references: [Id])
}
